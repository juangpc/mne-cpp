#!/bin/bash


#####  default parameters

VerboseMode="true"
ExitOnFirstFail="false"
RunCodeCoverage="false"

doPrintConfiguration() {
  echo =======================================
  echo ==   Printing Configuration
  echo ==   ----------------------
  echo ==   VerboseMode = $VerboseMode
  echo ==   ExitOnFirstFail = $ExitOnFirstFail
  echo ==   RunCodeCoverage = $RunCodeCoverage
  echo =======================================
}

doPrintHelp() {
  echo " "
  echo "MNE-CPP testing script help."
  echo "This script will run all applications in bin folder starting with "test_""
  echo "For help run: ./test_linux help"
  echo "Normal call has 2 or 3 arguments: ./test_linux (verbose/summary) (exitOnFail/continueOnFail) [coverage]"
  echo " "
}

if [[ -z "$1" ]]; then
  echo Running Script with default parameters:
else
  if [[ $1 == verbose ]]; then
    VerboseMode="true"
  elif [[ $1 == summary ]]; then
    VerboseMode="false"
  elif [[ $1 == help ]]; then
    doPrintHelp
    exit 1
  fi

  if [[ $2 == exitOnFail ]]; then
    ExitOnFirstFail="true"
  elif [[ $2 == continueOnFail ]]; then
    ExitOnFirstFail="false"    
  fi

  if [[ $3 == coverage ]]; then
    RunCodeCoverage="true"
  fi
fi

doPrintConfiguration

##########

RepoRootDir="$(dirname "$BASH_SOURCE")/../.."
echo $RepoRootDir

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RepoRootDir/lib

##########
CompoundOutput=0

for test in ./bin/test_*;
do
  # Run all tests and call gcov on all cpp files after each test run. Then upload to codecov for every test run.
  # Codecov is able to process multiple uploads and merge them as soon as the CI job is done.
  if [ $VerboseMode == "false" ];
  then
    $test &> /dev/null
    lastReturnValue=$?
  else
    $test 
    lastReturnValue=$?
  fi

  if [ $lastReturnValue -ne 0 ];
  then 
    CompoundOutput=$((CompoundOutput + 1))
    echo ">> Test $test FAILED!   ******** "

    if [ $ExitOnFirstFail == "true" ];
    then
      exit $lastReturnValue
    fi
  else
    echo ">> Test $test is rock solid!"
  fi

  if [ $RunCodeCoverage == "true" ];
  then
    find ./libraries -type f -name "*.cpp" -exec gcov {} \; &> /dev/null
    # Hide codecov output since it corrupts the log too much
    codecov &> /dev/null
  fi

done

exit $CompoundOutput
