#!/bin/bash


#####  default parameters

VerboseMode="true"
ExitOnFirstFail="false"
RunCodeCoverage="false"

doPrintConfiguration() {
  echo =========================================
  echo " "  VerboseMode = $VerboseMode
  echo " "  ExitOnFirstFail = $ExitOnFirstFail
  echo " "  RunCodeCoverage = $RunCodeCoverage
  echo =========================================
}

doPrintHelp() {
  echo " "
  echo "MNE-CPP testing script help."
  echo "This script will run all applications in bin folder starting with "test_""
  echo "For help run: ./test_all help"
  echo "Normal call has 2 or 3 arguments: ./test_all (verbose/summary) (exitOnFail/continueOnFail) [coverage/noCoverage]"
  echo " "
}

if [[ -z "$1" ]]; then
  echo " "
  echo "Running Script with default parameters."
  echo "Press H for Help."
  echo " "
  doPrintConfiguration
  echo " " 
  read -p "Are you sure you want to continue? (Yy)" -n 1 -r
  echo " "
  if [[ $REPLY =~ ^[Hh]$ ]]; then
    doPrintHelp
    exit 1
  elif [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 0
  fi
else
  if [[ $1 == verbose ]]; then
    VerboseMode="true"
  elif [[ $1 == summary ]]; then
    VerboseMode="false"
  elif [[ $1 == help ]]; then
    doPrintHelp
    exit 1
  fi

  if [[ $2 == exitOnFail ]]; then
    ExitOnFirstFail="true"
  elif [[ $2 == continueOnFail ]]; then
    ExitOnFirstFail="false"    
  fi

  if [[ $3 == coverage ]]; then
    RunCodeCoverage="true"
  else 
    RunCodeCoverage="false"
  fi
fi

doPrintConfiguration

##########

RepoRootDir="$(dirname "$BASH_SOURCE")/../.."
echo $RepoRootDir

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RepoRootDir/lib

##########
CompoundOutput=0
testColumnWidth=40
printf "%${testColumnWidth}s %s\n" " Test Name " " Result "

for test in ./bin/test_*;
do
  # Run all tests and call gcov on all cpp files after each test run. Then upload to codecov for every test run.
  # Codecov is able to process multiple uploads and merge them as soon as the CI job is done.
  if [ $VerboseMode == "false" ];
  then
    $test &> /dev/null
    lastReturnValue=$?
  else
    $test 
    lastReturnValue=$?
  fi

  if [ $lastReturnValue -ne 0 ];
  then 
    CompoundOutput=$((CompoundOutput + 1))
    printf "%${testColumnWidth}s \e[91m %s \e[0m\n" "${test}" "FAILED!"

    if [ $ExitOnFirstFail == "true" ];
    then
      exit $lastReturnValue
    fi
  else
    # echo ">> Test $test \t\t\t\t RockSolid!"
    printf "%${testColumnWidth}s \e[92m %s \e[0m\n" "${test}" "Rock Solid!"
  fi

  if [ $RunCodeCoverage == "true" ];
  then
    find ./libraries -type f -name "*.cpp" -exec gcov {} \; &> /dev/null
    # Hide codecov output since it corrupts the log too much
    codecov &> /dev/null
  fi

done

exit $CompoundOutput
